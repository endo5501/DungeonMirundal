"""地上部-ダンジョン遷移システムのテスト"""

import pytest
from unittest.mock import Mock, patch, MagicMock, create_autospec

from src.character.character import Character
from src.character.party import Party
from src.character.stats import BaseStats


class TestTransitionSystem:
    """遷移システムのテスト"""
    
    @patch('src.core.game_manager.ShowBase', autospec=True)
    @patch('src.core.game_manager.config_manager')
    @patch('src.core.game_manager.InputManager')
    @patch('src.core.game_manager.OverworldManager')
    @patch('src.core.game_manager.DungeonManager')
    @patch('src.core.game_manager.OnscreenText')
    @patch('src.core.game_manager.globalClock', create=True)
    def setup_method(self, mock_clock, mock_text, mock_dungeon, mock_overworld, 
                     mock_input, mock_config, mock_showbase):
        """各テストメソッドの前に実行"""
        # モックの設定
        mock_config.load_config.return_value = {
            "gameplay": {"language": "ja"}, 
            "window": {"title": "Test", "width": 800, "height": 600}, 
            "graphics": {"fps": 60}, 
            "debug": {"enabled": False}
        }
        mock_config.get_text.return_value = "Test"
        mock_config.set_language = Mock()
        
        mock_clock.setMode = Mock()
        mock_clock.setFrameRate = Mock()
        mock_clock.MLimited = 1
        
        # ShowBaseインスタンスのモック
        mock_showbase_instance = Mock()
        mock_showbase_instance.win = Mock()
        mock_showbase_instance.win.requestProperties = Mock()
        mock_showbase_instance.win.getProperties = Mock(return_value=Mock())
        mock_showbase_instance.setFrameRateMeter = Mock()
        mock_showbase_instance.config = mock_config
        mock_showbase.return_value = mock_showbase_instance
        
        # マネージャーのモック
        self.mock_overworld_manager = Mock()
        self.mock_dungeon_manager = Mock()
        mock_overworld.return_value = self.mock_overworld_manager
        mock_dungeon.return_value = self.mock_dungeon_manager
        
        # GameManagerをインポートして作成
        from src.core.game_manager import GameManager
        self.game_manager = GameManager()
        
        # テスト用パーティ作成
        stats = BaseStats(strength=14, agility=12, intelligence=10, faith=11, luck=13)
        character = Character.create_character("TestHero", "human", "fighter", stats)
        
        self.party = Party(party_id="test_party", name="TestParty")
        self.party.add_character(character)
        
        # パーティを設定
        self.game_manager.set_current_party(self.party)
    
    def test_game_manager_initialization(self):
        """GameManager初期化テスト"""
        assert self.game_manager.current_location == "overworld"
        assert self.game_manager.game_state == "startup"
        assert self.game_manager.overworld_manager is not None
        assert self.game_manager.dungeon_manager is not None
        assert self.game_manager.current_party == self.party
    
    def test_set_current_party(self):
        """パーティ設定テスト"""
        new_party = Party(party_id="new_party", name="NewParty")
        self.game_manager.set_current_party(new_party)
        
        assert self.game_manager.get_current_party() == new_party
        assert self.game_manager.current_party == new_party
    
    def test_transition_to_dungeon_success(self):
        """ダンジョン遷移成功テスト"""
        # モックの設定
        self.mock_overworld_manager.exit_overworld.return_value = True
        self.mock_dungeon_manager.enter_dungeon.return_value = True
        
        # ダンジョンへ遷移
        result = self.game_manager.transition_to_dungeon()
        
        # 結果確認
        assert result == True
        assert self.game_manager.current_location == "dungeon"
        assert self.game_manager.game_state == "dungeon_exploration"
        
        # メソッド呼び出し確認
        self.mock_overworld_manager.exit_overworld.assert_called_once()
        self.mock_dungeon_manager.enter_dungeon.assert_called_once_with("main_dungeon", self.party)
    
    def test_transition_to_dungeon_failure(self):
        """ダンジョン遷移失敗テスト"""
        # モックの設定（ダンジョン入場失敗）
        self.mock_overworld_manager.exit_overworld.return_value = True
        self.mock_dungeon_manager.enter_dungeon.return_value = False
        self.mock_overworld_manager.enter_overworld.return_value = True
        
        # ダンジョンへ遷移
        result = self.game_manager.transition_to_dungeon()
        
        # 結果確認（失敗、地上部に戻る）
        assert result == False
        assert self.game_manager.current_location == "overworld"
        
        # メソッド呼び出し確認
        self.mock_overworld_manager.exit_overworld.assert_called_once()
        self.mock_dungeon_manager.enter_dungeon.assert_called_once_with("main_dungeon", self.party)
        self.mock_overworld_manager.enter_overworld.assert_called_once_with(self.party)
    
    def test_transition_to_dungeon_no_party(self):
        """パーティなしでのダンジョン遷移テスト"""
        # パーティを削除
        self.game_manager.current_party = None
        
        # ダンジョンへ遷移
        result = self.game_manager.transition_to_dungeon()
        
        # 結果確認（失敗）
        assert result == False
        assert self.game_manager.current_location == "overworld"
    
    def test_transition_to_dungeon_dead_party(self):
        """全員死亡パーティでのダンジョン遷移テスト"""
        # パーティメンバーを全員死亡させる
        for character in self.party.characters:
            character.take_damage(1000)
        
        # ダンジョンへ遷移
        result = self.game_manager.transition_to_dungeon()
        
        # 結果確認（失敗）
        assert result == False
        assert self.game_manager.current_location == "overworld"
    
    def test_transition_to_overworld_success(self):
        """地上部遷移成功テスト"""
        # 現在地をダンジョンに設定
        self.game_manager.current_location = "dungeon"
        
        # モックの設定
        self.mock_dungeon_manager.exit_dungeon.return_value = True
        self.mock_overworld_manager.enter_overworld.return_value = True
        
        # 地上部へ遷移
        result = self.game_manager.transition_to_overworld()
        
        # 結果確認
        assert result == True
        assert self.game_manager.current_location == "overworld"
        assert self.game_manager.game_state == "overworld_exploration"
        
        # メソッド呼び出し確認
        self.mock_dungeon_manager.exit_dungeon.assert_called_once()
        self.mock_overworld_manager.enter_overworld.assert_called_once_with(self.party)
    
    def test_transition_to_overworld_failure(self):
        """地上部遷移失敗テスト"""
        # 現在地をダンジョンに設定
        self.game_manager.current_location = "dungeon"
        
        # モックの設定（地上部入場失敗）
        self.mock_dungeon_manager.exit_dungeon.return_value = True
        self.mock_overworld_manager.enter_overworld.return_value = False
        
        # 地上部へ遷移
        result = self.game_manager.transition_to_overworld()
        
        # 結果確認（失敗）
        assert result == False
        
        # メソッド呼び出し確認
        self.mock_dungeon_manager.exit_dungeon.assert_called_once()
        self.mock_overworld_manager.enter_overworld.assert_called_once_with(self.party)
    
    def test_transition_to_overworld_no_party(self):
        """パーティなしでの地上部遷移テスト"""
        # 現在地をダンジョンに設定
        self.game_manager.current_location = "dungeon"
        
        # パーティを削除
        self.game_manager.current_party = None
        
        # 地上部へ遷移
        result = self.game_manager.transition_to_overworld()
        
        # 結果確認（失敗）
        assert result == False
    
    @patch('src.core.save_manager.save_manager.save_additional_data')
    def test_save_game_state_overworld(self, mock_save_additional):
        """地上部でのゲーム状態保存テスト"""
        # 地上部にいる状態
        self.game_manager.current_location = "overworld"
        self.game_manager.game_state = "overworld_exploration"
        
        # モックの設定
        self.mock_overworld_manager.save_overworld_state.return_value = True
        mock_save_additional.return_value = True
        
        # ゲーム状態保存
        result = self.game_manager.save_game_state("slot_1")
        
        # 結果確認
        assert result == True
        
        # メソッド呼び出し確認
        self.mock_overworld_manager.save_overworld_state.assert_called_once_with("slot_1")
        mock_save_additional.assert_called_once()
    
    @patch('src.core.save_manager.save_manager.save_additional_data')
    def test_save_game_state_dungeon(self, mock_save_additional):
        """ダンジョンでのゲーム状態保存テスト"""
        # ダンジョンにいる状態
        self.game_manager.current_location = "dungeon"
        self.game_manager.game_state = "dungeon_exploration"
        
        # モックの設定
        self.mock_dungeon_manager.save_dungeon.return_value = True
        mock_save_additional.return_value = True
        
        # ゲーム状態保存
        result = self.game_manager.save_game_state("slot_1")
        
        # 結果確認
        assert result == True
        
        # メソッド呼び出し確認
        self.mock_dungeon_manager.save_dungeon.assert_called_once_with("slot_1")
        mock_save_additional.assert_called_once()
    
    @patch('src.core.save_manager.save_manager.load_additional_data')
    def test_load_game_state_overworld(self, mock_load_additional):
        """地上部でのゲーム状態読み込みテスト"""
        # モックの設定
        mock_load_additional.side_effect = [
            # game_state データ
            {
                'current_location': 'overworld',
                'game_state': 'overworld_exploration',
                'party_id': 'test_party'
            },
            # party データ
            self.party.to_dict()
        ]
        self.mock_overworld_manager.load_overworld_state.return_value = True
        self.mock_overworld_manager.enter_overworld.return_value = True
        
        # ゲーム状態読み込み
        result = self.game_manager.load_game_state("slot_1")
        
        # 結果確認
        assert result == True
        assert self.game_manager.current_location == "overworld"
        assert self.game_manager.game_state == "overworld_exploration"
        
        # メソッド呼び出し確認
        assert mock_load_additional.call_count == 2
        self.mock_overworld_manager.load_overworld_state.assert_called_once_with("slot_1")
        self.mock_overworld_manager.enter_overworld.assert_called_once()
    
    @patch('src.core.save_manager.save_manager.load_additional_data')
    def test_load_game_state_dungeon(self, mock_load_additional):
        """ダンジョンでのゲーム状態読み込みテスト"""
        # モックの設定
        mock_load_additional.side_effect = [
            # game_state データ
            {
                'current_location': 'dungeon',
                'game_state': 'dungeon_exploration',
                'party_id': 'test_party'
            },
            # party データ
            self.party.to_dict()
        ]
        self.mock_dungeon_manager.load_dungeon.return_value = True
        
        # ゲーム状態読み込み
        result = self.game_manager.load_game_state("slot_1")
        
        # 結果確認
        assert result == True
        assert self.game_manager.current_location == "dungeon"
        assert self.game_manager.game_state == "dungeon_exploration"
        
        # メソッド呼び出し確認
        assert mock_load_additional.call_count == 2
        self.mock_dungeon_manager.load_dungeon.assert_called_once_with("slot_1")
    
    @patch('src.core.save_manager.save_manager.load_additional_data')
    def test_load_game_state_no_data(self, mock_load_additional):
        """データがない場合の読み込みテスト"""
        # モックの設定（データなし）
        mock_load_additional.return_value = None
        
        # ゲーム状態読み込み
        result = self.game_manager.load_game_state("slot_1")
        
        # 結果確認（失敗）
        assert result == False


class TestDungeonManagerCallback:
    """ダンジョンマネージャーのコールバックテスト"""
    
    @patch('src.core.game_manager.ShowBase', autospec=True)
    @patch('src.core.game_manager.config_manager')
    @patch('src.core.game_manager.InputManager')
    @patch('src.core.game_manager.OverworldManager')
    @patch('src.core.game_manager.DungeonManager')
    @patch('src.core.game_manager.OnscreenText')
    @patch('src.core.game_manager.globalClock', create=True)
    def test_return_to_overworld_callback_setup(self, mock_clock, mock_text, mock_dungeon, 
                                               mock_overworld, mock_input, mock_config, mock_showbase):
        """地上部帰還コールバック設定テスト"""
        # モックの設定
        mock_config.load_config.return_value = {
            "gameplay": {"language": "ja"}, 
            "window": {"title": "Test", "width": 800, "height": 600}, 
            "graphics": {"fps": 60}, 
            "debug": {"enabled": False}
        }
        mock_config.get_text.return_value = "Test"
        mock_config.set_language = Mock()
        
        mock_clock.setMode = Mock()
        mock_clock.setFrameRate = Mock()
        mock_clock.MLimited = 1
        
        # ShowBaseインスタンスのモック
        mock_showbase_instance = Mock()
        mock_showbase_instance.win = Mock()
        mock_showbase_instance.win.requestProperties = Mock()
        mock_showbase_instance.win.getProperties = Mock(return_value=Mock())
        mock_showbase_instance.setFrameRateMeter = Mock()
        mock_showbase_instance.config = mock_config
        mock_showbase.return_value = mock_showbase_instance
        
        # マネージャーのモック
        mock_dungeon_manager = Mock()
        mock_dungeon.return_value = mock_dungeon_manager
        
        # GameManagerをインポートして作成
        from src.core.game_manager import GameManager
        game_manager = GameManager()
        
        # コールバックが設定されていることを確認
        assert game_manager.dungeon_manager.set_return_to_overworld_callback.called
        game_manager.dungeon_manager.set_return_to_overworld_callback.assert_called_with(game_manager.transition_to_overworld)
    
    @patch('src.core.game_manager.ShowBase', autospec=True)
    @patch('src.core.game_manager.config_manager')
    @patch('src.core.game_manager.InputManager')
    @patch('src.core.game_manager.OverworldManager')
    @patch('src.core.game_manager.DungeonManager')
    @patch('src.core.game_manager.OnscreenText')
    @patch('src.core.game_manager.globalClock', create=True)
    def test_return_to_overworld_method(self, mock_clock, mock_text, mock_dungeon, 
                                       mock_overworld, mock_input, mock_config, mock_showbase):
        """地上部帰還メソッドテスト"""
        # モックの設定
        mock_config.load_config.return_value = {
            "gameplay": {"language": "ja"}, 
            "window": {"title": "Test", "width": 800, "height": 600}, 
            "graphics": {"fps": 60}, 
            "debug": {"enabled": False}
        }
        mock_config.get_text.return_value = "Test"
        mock_config.set_language = Mock()
        
        mock_clock.setMode = Mock()
        mock_clock.setFrameRate = Mock()
        mock_clock.MLimited = 1
        
        # ShowBaseインスタンスのモック
        mock_showbase_instance = Mock()
        mock_showbase_instance.win = Mock()
        mock_showbase_instance.win.requestProperties = Mock()
        mock_showbase_instance.win.getProperties = Mock(return_value=Mock())
        mock_showbase_instance.setFrameRateMeter = Mock()
        mock_showbase_instance.config = mock_config
        mock_showbase.return_value = mock_showbase_instance
        
        # マネージャーのモック
        mock_dungeon_manager = Mock()
        mock_dungeon_manager.return_to_overworld.return_value = False
        mock_dungeon.return_value = mock_dungeon_manager
        
        # GameManagerをインポートして作成
        from src.core.game_manager import GameManager
        game_manager = GameManager()
        
        dungeon_manager = game_manager.dungeon_manager
        
        # ダンジョンが存在しない場合
        result = dungeon_manager.return_to_overworld()
        assert result == False
        
        # コールバックが設定されていることを確認
        dungeon_manager.set_return_to_overworld_callback.assert_called_with(game_manager.transition_to_overworld)